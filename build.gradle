plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}


subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven { url "https://maven.neoforged.net/releases/" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        withSourcesJar()
    }
}


ext.getChangeLog = { ->
    return ""
}

publishMods {
    changelog = project.getChangeLog()
    type = STABLE

    def optionsCurseforge = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        projectId = "489631"
        projectSlug = "fuel-info"
        minecraftVersions.add("${project.minecraft_version}")
    }

    def optionsModrinth = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "J1ueTDcI"
        minecraftVersions.add("${project.minecraft_version}")
    }


    curseforge("curseforgeForge") {
        from optionsCurseforge
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_version} (NeoForge)"
        version = "${rootProject.mod_version}-neoforge"

        announcementTitle = "Download from CurseForge (NeoForge)"
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        modLoaders.add("fabric")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_version} (Fabric)"
        version = "${rootProject.mod_version}-fabric"

        requires("fabric-api")

        announcementTitle = "Download from CurseForge (Fabric)"
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_version} (NeoForge)"
        version = "${rootProject.mod_version}-neoforge"

        announcementTitle = "Download from Modrinth (NeoForge)"
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        modLoaders.add("fabric")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_version} (Fabric)"
        version = "${rootProject.mod_version}-fabric"

        requires("fabric-api")

        announcementTitle = "Download from Modrinth (Fabric)"
    }

    discord {
        webhookUrl = providers.environmentVariable("CAFETERIA_MOD_RELEASE_WEBHOOK")
        username = "${rootProject.archives_base_name}"
        avatarUrl = "${rootProject.discordAnnouncementIconURL}"

        content = changelog.map { "# " + (project.archives_base_name as String) + " " + (project.mod_version as String) + " has been released \n" + it}
    }
}
